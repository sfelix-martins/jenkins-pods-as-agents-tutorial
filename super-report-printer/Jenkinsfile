import groovy.transform.Field

library 'jenkins-tutorial-shared-lib'


// We need this because of the mono repo :(
@Field String PROJECT_DIR = 'super-report-printer'

pipeline {
    // We should really use some specific agent, we are getting crashes on some agents without Node or Docker!
    agent {
        kubernetes {
            inheritFrom 'Node16Alpine Kaniko'
            defaultContainer 'node16'
            yamlMergeStrategy merge()
            yaml '''
            spec:
              containers:
                - name: python
                  image: python:3.10-alpine3.16
                  command: ["sleep", "infinity"]
                  resources:
                    requests:
                      cpu: 10m
                      memory: 12Mi
                    limits:
                      cpu: 1
                      memory: 12Mi
            '''
        }
    }

    options {
        buildDiscarder logRotator(numToKeepStr: '10')
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'MINUTES')
    }

    stages {
        stage('Generate Report') {
            steps {
                dir(PROJECT_DIR) {
                    container ('python') {
                        sh './report_generator.py'
                    }
                }
            }
        }

        stage('Install dependencies') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'npm ci'
                }
            }
        }

        stage('Build Typescript') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'npm run build'
                }
            }
        }

        stage('Build Image') {
            environment {
                DOCKER_BUILDKIT = "1"
            }
            steps {
                script {
                    kaniko.buildNoPush(
                        imageName: 'super-report-printer',
                        imageTag: getImageTags(),
                        context: PROJECT_DIR,
                        container: 'kaniko',
                        dockerfile: "./Dockerfile",
                        extraArgs: '--use-new-run --snapshotMode=redo'
                    )
                }
            }
        }
    }
}

def getImageTags() {
    def tags = [sanitizeImageTag("${env.GIT_BRANCH}-${env.GIT_COMMIT}")]
    if (isMaster()) {
        tags += 'latest'
    }
    return tags
}
